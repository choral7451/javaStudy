package java0120;


public class lambda {

//    int max(int a, int b) {
//        return a > b ? a :b;
//    }

    // 리턴타입 메서드명 변경


    public static void main(String[] args) {





        // 함수형 프로그래밍
        // 순수함수와 공유상태, 변경가능한데이터, 부작용을 피하는 기본원칙에 따른
        // 프로그래밍 방식
        
        // 객체지향은 동작하는 부분을 캡슐화 해서 이해
        // 함수형 프로그래밍은 동작하는 부분을 최소화 해서 이해
        
        // 함수형 프로그래밍은 선언적 방식으로 구현
        // 1급객체(1급 함수)
        // 함수형 프로그래밍의 전제조건.
        // 1. 변수, 데이터 구조에 넣을 수 있음
        // 2. 파라미터로 전달이 가능
        // 3. 리턴값으로 사용할 수 있다.
        // 
        // 자바스크립트의 경우 함수는 객체 취급을 받는다.

        // 람다(1.8버전 이상부터 사용가능)
        // 최신 언어에서 사용되는 식 중 하나
        // 함수형 언어의 특징으로부터 파생되었음,
        // 이름 없는 함수
        // int[] arr = new int[5];

        //람다식 예제
        // Arrays.setAll(arr, () -> (int)(Math.random()*5)+1);

        // 람다의 경우 표현식을 간결하게하여 필요한 정보만을 사용
        // 불필요한 루프만 삭제가 가능
        // 병렬처리에 유리. (람다의 형태 자체가 다중 CPU 를 활용하는 형태)

        // 람다의 단점
        // 너무 남용하면 코드가 가독성이 급감.
        // 람다식이 단순히 모든 요소를 저눕 순회시에는 느릴 수 있음
        // 디버깅이 매우 어려움

        // 람다식 작성하기
        // (인수클래스 인수) -> {}

        // 메서드를 람다식으로 바꿔보기


    }

}
